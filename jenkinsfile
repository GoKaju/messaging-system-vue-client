node {
    
    stage('Clone Sources') {
        try{
        git branch: 'develop', url: 'https://github.com/GoKaju/messaging-system-vue-client.git'
        }catch(e){
            notify("Clone Sources failed!")
            trow e
        }
      }

    stage('Information') {
        sh 'node -v'
        sh 'npm -v'
        sh 'vue -V'
        sh 'docker -v'
     
    }
    // stage('Config') {
    //   steps {
    //     sh 'npm set registry https://registry.npm.taobao.org'
    //     sh 'npm set disturl https://npm.taobao.org/dist'
    //     sh 'npm set chromedriver_cdnurl http://cdn.npm.taobao.org/dist/chromedriver'
    //     sh 'npm set operadriver_cdnurl http://cdn.npm.taobao.org/dist/operadriver'
    //     sh 'npm set phantomjs_cdnurl http://cdn.npm.taobao.org/dist/phantomjs'
    //     sh 'npm set fse_binary_host_mirror https://npm.taobao.org/mirrors/fsevents'
    //     sh 'npm set sass_binary_site http://cdn.npm.taobao.org/dist/node-sass'
    //     sh 'npm set electron_mirror http://cdn.npm.taobao.org/dist/electron/'
    //   }
    // }
    stage('Dependencies') {
        sh 'npm install'
     
    }
    stage('Test') {
        try{
        sh 'npm run test:unit'
        }catch(e){
            notify("Unit Test failed!")
            trow e
        }
      

    }

    stage('Build Docker Image') {
        
       sh "docker build -t messaging-system-vue-client:dev ."
     }
    stage('Run Docker Image') {
       sh "docker run -d -p 8088:8080 --rm --name dockerize-messaging-system-vue-client  messaging-system-vue-client:dev "
     }
    
    notify("Build Success!")
    

}
  def notify(String msg){
      slackSend(color:'#FFFF00',message:"${msg}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
  }
